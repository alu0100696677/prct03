
21. ¿Qué diferencia hay entre "\t\n" y ’\t\n’?
En el primer caso funciona correctamente, interpretando que significan \t\n. Con las comillas simples no reconoce separador, mostrandolo tal cual en el mensaje.


22. ¿Cómo funciona %q? ¿Qué es %q{hello world\n}? ¿Qué es %q{’a’ ’b’ ’c’}?
En el primer caso el mensaje se muestra entre comillas, aunque no se reconoce el separador. En el segundo, muestra el array separdo de comillas simples.


23. ¿Cómo funciona %Q? ¿Qué es %Q{hello world\n}? ¿Qué es %Q{"a" "b" "c"}?
En el primero, aparece sólo \n al final del mensaje, mientras que en el segundo mensaje lo va mostrando "\"a\"\"b\"\"\c""

24. 
   "--4--\n--2--\n" 

25. 
   "--\#{a}--\n--\#{b}--\n" 

26.
   s[0,2] = "he"
   s[-1,1] ="o"
   s[0,10] ="hello"

27. 
   "..."

28. 
   "--\#{a}--\n--\#{b}--\n" 

29. 
   "2 2 2 "

30. 
    Crea una cadena de caracteres.

31. 
    No entiende que es un tabulador y un separador y le añado otra "\" más.

32. 
    En ese caso si muestra separado cada el tabulador y el separador bien.

33. 
    Crea un nuevo array de 3 palabras en este caso "nils" ([nil, nil, nil])

34. 
    Aquí indicas mediante los parámetros que vas a colocar tres ceros.

35. 
    [[1, 2], [3, 4]]
 
36. 
    [0, 2, 4] 

37. 
    a[1,1] -> ["b"] 

    a[-2,2]-> ["c", "d"]

    a[0,2]-> ["a", "b"]

    a[0..2]-> ["a", "b", "c"]

    a[0..1]-> ["a", "b"]

    a[-2..-1]-> ["a", "b"]

38.
    >> a
    => ["a", "b", "c", "d", "e"]
    >> a[0,2] = %w{A B}
    => ["A", "B"]
    >> a
    =>["A", "B", "c", "d"]
    >> a[2..5] = %w{C D E}
    => ["C", "D", "E"]
    >> a
    =>["A", "B", "C", "D", "E"] 
    >> a[0,0] = [1,2,3]
    => [1, 2, 3]
    >> a
    =>[1, 2, 3, "A", "B", "C", "D", "E"]
    >> a[0,2] = []
    => []
    >> a
    =>[3, "A", "B", "C", "D", "E"] 
    >> a[-1,1] = [ ’Z’ ]
    => ["Z"]
    >> a
    =>[3, "A", "B", "C", "D", "Z"] 
    >> a[-2,2] = nil
    => nil
    >> a
    =>[3, "A", "B", "C", "D", nil] 

39.
    >> a = (1...4).to_a
    =>[1, 2, 3]
    >> a = a + [4, 5]
    =>[1, 2, 3, 4, 5] 
    >> a += [[6, 7, 8]]
    =>[1, 2, 3, 4, 5, [6, 7, 8]] 
    >> a = a + 9
    =>TypeError: no implicit conversion of Fixnum into Array
            from (irb):48:in `+'
            from (irb):48
            from /usr/local/rvm/rubies/ruby-2.0.0-p247/bin irb:13:in `<main>'

40.
    >> x = %w{a b c b a}
    =>["a", "b", "c", "b", "a"] 
    >> x = x - %w{b c d}
    =>["a", "a"] 

41.
    >> z = [0]*8
    =>[0, 0, 0, 0, 0, 0, 0, 0] 

42.
    >> a = []
    => []
    >> a << 1
    =>[1]
    >> a << 2 << 3
    =>a << 2 << 3
    >> a << [4, 5, 6]
    =>[1, 2, 3, [4, 5, 6]]
    >> a.concat [7, 8]
    =>[1, 2, 3, [4, 5, 6], 7, 8] 

43. 
    >> a = [1, 1, 2, 2, 3, 3, 4]
    => [1, 1, 2, 2, 3, 3, 4]
    >> b = [5, 5, 4, 4, 3, 3, 2]
    => [5, 5, 4, 4, 3, 3, 2]
    >> c = a | b
    =>[1, 2, 3, 4, 5] 
    >> d = b | a
    =>[5, 4, 3, 2, 1] 
    >> e = a & b
    =>[2, 3, 4] 
    >> f = b & a
    =>[4, 3, 2] 


44.
    >> a = 1..10
    => 1..10
    >> a.class
    => Range
    >> a.to_a
    =>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
    >> b = 1...10
    => 1....10
    >> b.to_a
    =>[1, 2, 3, 4, 5, 6, 7, 8, 9] 
    >> b.include? 10
    >> b.include? 10
    =>false
    >> b.include? 8
    =>true
    >> b.step(2) {|x| print "#{x} " }
    1 3 5 7 9  => 1...10 
    >> 1..3.to_a
    NoMethodError: undefined method `to_a' for 3:Fixnum
            from (irb):15
            from /usr/local/rvm/rubies/ruby-2.0.0-p247/bin/irb:13:in `<main>'

45.
    >> r = 0...100
    => 0....100
    >> r.member? 50
    =>true
    >> r.include? 99.9
    =>true
    >> r.member? 99.9
    =>true

46.
    >> true.class
    =>TrueClass
    >> false.class
    =>FalseClass
    >> puts "hello" if 0
    hello
    =>nil
    >> puts "hello" if nil
    =>nil
    >> puts "hello" if ""
    (irb):25: warning: string literal in condition
    hello
     => nil 

47. 
    >> x = :sym
    => :sym
    >> x.class
    =>Symbol
    >> x == ’sym’
    =>false
    >> x == :sym
    =>true
    >> z = :’a long symbol’
    => :"a long symbol"
    >> z.class
    => Symbol
    >> x == ’sym’.to_sym
    =>true
    >> x.to_s == ’sym’
    =>true

48.
    >> s = "Ruby"
    => "Ruby"
    >> t = s
    => "Ruby"
    >> t[-1] = ""
    => ""
    >> print s
    Rub=> nil
    >> t = "Java"
    => "Java"
    >> print s, t
    RubJava => nil

49.
    >> "%d %s" % [3, "rubies"]
    =>"3 rubies"

50. 
    >> x, y = 4, 5
    =>[4,5]
    >> z = x > y ? x : y
    =>5
    >> x,y,z = [1,2,3]
    =>[1, 2, 3]

51.
    >> x = { :a => 1, :b => 2 }
    => {:b=>2, :a=>1}
    >> x.keys
    =>[:a, :b] 
    >> x.values
    =>[1,2]
    >> x[:c] = 3
    => 3
    >> x
    =>{:a=>1, :b=>2, :c=>3}
    >> x.delete(’a’)
    => nil
    >> x
    =>{:a=>1, :b=>2, :c=>3}
    >> x.delete(:a)
    => 1
    >> x
    => {:b=>2, :c=>3}
    >> x = { :a => 1, :b => 2, :c => 4 }
    => {:b=>2, :c=>4, :a=>1}
    >> x.delete_if { |k,v| v % 2 == 0 }
    =>{:a=>1} 
    >> x
    =>{:a=>1} 

52. 
    Yield cede el control al bloque.

53. 
    No hay ninguna diferencia

54. 
    ["hello", "world", "hello", "LPP"]

55. 
    Crea un array de valores, y le asigna un valor a cada posición. Luego hace una iteración mostrando todos los valores de "c".
